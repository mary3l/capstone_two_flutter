// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "dart run orm"
  engineType = "flutter"
}

datasource db {
  provider  = "sqlite"
  url       = env("DATABASE_URL")
  // Why need directUrl ?
  // The Prisma CLI tool uses the file URL relative to the prisma directory when it is configured at runtime. The Dart runtime uses PWD
  directUrl = env("DIRECT_DATABASE_URL")
}

model Season {
  id        Int    @id @default(autoincrement())
  startYear Int
  endYear   Int
  games     Game[]
}

model Game {
  id               Int                @id @default(autoincrement())
  title            String
  againstTeam      String
  date             DateTime
  semester         String
  team             Team?              @relation(fields: [teamID], references: [id])
  teamID           Int?
  season           Season             @relation(fields: [seasonID], references: [id]) // This defines the back reference from Game to Season
  seasonID         Int
  PlayerStatistics PlayerStatistics[]
}

model Quarter {
  id               Int                @id @default(autoincrement())
  number           Int
  totalScore       Int                @default(0)
  madeOne          Int                @default(0)
  madeTwo          Int                @default(0)
  madeThree        Int                @default(0)
  miss             Int                @default(0)
  reboundOffensive Int                @default(0)
  reboundDefensive Int                @default(0)
  foul             Int                @default(0)
  turnover         Int                @default(0)
  assist           Int                @default(0)
  block            Int                @default(0)
  steal            Int                @default(0)
  Logs             Logs[]
  PlayerStatistics PlayerStatistics[]
}

model Logs {
  id                 Int      @id @default(autoincrement())
  keywordOne         String
  keywordTwo         String
  keywordThree       String?
  isValidCombination Boolean
  timestamp          DateTime
  quarter            Quarter  @relation(fields: [quarterID], references: [id])
  quarterID          Int
}

model Team {
  id     Int      @id @default(autoincrement())
  name   String
  Game   Game[]
  Player Player[]
}

model Player {
  id               Int                @id @default(autoincrement())
  lastName         String
  firstName        String
  middleName       String
  jerseyNumber     Int
  gamesPlayed      Int?
  team             Team?              @relation(fields: [teamID], references: [id])
  teamID           Int?
  PlayerStatistics PlayerStatistics[]
}

model PlayerStatistics {
  id        Int      @id @default(autoincrement())
  player    Player?  @relation(fields: [playerID], references: [id])
  playerID  Int? // Corresponds to String first = _keywordCombinations[0];
  game      Game?    @relation(fields: [gameID], references: [id])
  gameID    Int? // Optional: You might link this dynamically if needed.
  quarter   Quarter? @relation(fields: [quarterID], references: [id])
  quarterID Int? // Corresponds to the associated quarter.
  action    String // Represents actions like "steal", "turnover", etc. Maps to String second = _keywordCombinations[1];
  points    Int? // Nullable field to represent points. Maps to String third = _keywordCombinations[2];
}
